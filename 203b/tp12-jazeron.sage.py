

# This file was *autogenerated* from the file tp12-jazeron.sage
from sage.all_cmdline import *   # import sage library

_sage_const_356 = Integer(356); _sage_const_278 = Integer(278); _sage_const_417 = Integer(417); _sage_const_27 = Integer(27); _sage_const_132 = Integer(132); _sage_const_464 = Integer(464); _sage_const_521 = Integer(521); _sage_const_1287 = Integer(1287); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_65946239999 = Integer(65946239999); _sage_const_22022476093 = Integer(22022476093); _sage_const_10865199773 = Integer(10865199773); _sage_const_10 = Integer(10); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_29 = Integer(29); _sage_const_10000 = Integer(10000); _sage_const_42564360034887861127 = Integer(42564360034887861127); _sage_const_12843085802751039909 = Integer(12843085802751039909); _sage_const_8 = Integer(8); _sage_const_40 = Integer(40); _sage_const_32 = Integer(32); _sage_const_22 = Integer(22); _sage_const_13 = Integer(13); _sage_const_23 = Integer(23); _sage_const_15 = Integer(15); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_38 = Integer(38); _sage_const_20 = Integer(20); _sage_const_12 = Integer(12); _sage_const_19 = Integer(19); _sage_const_11 = Integer(11); _sage_const_33 = Integer(33); _sage_const_17 = Integer(17); _sage_const_7 = Integer(7); _sage_const_39 = Integer(39); _sage_const_34 = Integer(34); _sage_const_9 = Integer(9); _sage_const_36 = Integer(36); _sage_const_18 = Integer(18); _sage_const_14 = Integer(14); _sage_const_6 = Integer(6); _sage_const_21 = Integer(21); _sage_const_24 = Integer(24); _sage_const_35 = Integer(35); _sage_const_25 = Integer(25); _sage_const_899 = Integer(899); _sage_const_50 = Integer(50); _sage_const_1098 = Integer(1098); _sage_const_156 = Integer(156); _sage_const_42 = Integer(42); _sage_const_525748584 = Integer(525748584)
print("""\
# *************************************************************************** #
# *************************************************************************** #
# TP12 : CRYPTANALYSE ET CRYPTOGRAPHIE A BASE DE RESEAUX                      #
# *************************************************************************** #
# *************************************************************************** #
""")

# CONSIGNES
#
# Les seules lignes a modifier sont annoncee par "Code pour l'exercice"
# indique en commmentaire et son signalees
# Ne changez pas le nom des variables
#
# CONSEILS
#
# Ce modele vous sert a restituer votre travail. Il est deconseille d'ecrire
# une longue suite d'instruction et de debugger ensuite. Il vaut mieux tester
# le code que vous produisez ligne apres ligne, afficher les resultats et
# controler que les objets que vous definissez sont bien ceux que vous attendez.
#
# Vous devez verifier votre code en le testant, y compris par des exemples que
# vous aurez fabrique vous-meme.
#


reset()
print("""\
# ****************************************************************************
# SAC A DOS (NE PAS TRAITER LA QUESTION 2)
# ****************************************************************************
""")


# Donnees de l'enonce de l'exercice

b = [_sage_const_356 ,_sage_const_278 ,_sage_const_417 ,_sage_const_27 ,_sage_const_132 ,_sage_const_464 ,_sage_const_521 ]
s = _sage_const_1287 

# Code pour l'EXERCICE


M = matrix(ZZ,[[_sage_const_1  if i == j else _sage_const_0  for i in range(len(b)+_sage_const_1 )] for j in range(len(b)+_sage_const_1 )])
for i in range(len(b)):
    M[len(b),i] = b[i]
M[len(b),len(b)] = -s
M = M.T
x = M.LLL()[_sage_const_0 ,:]
x = x.T
print(sum([x[i]*b[i] for i in range(len(b))]))

# # Affichage des resultats

print("Le message est")
print(list(x)[:-_sage_const_1 ])

reset()

print("""\
# ****************************************************************************
# ATTAQUE DE WIENER
# ****************************************************************************
""")

# Donnees de l'enonce de l'exercice

N1 = _sage_const_65946239999 
e1 = _sage_const_22022476093 
N2 = _sage_const_65946239999 
e2 = _sage_const_10865199773 

# Code pour l'EXERCICE


phi = euler_phi(N1)

e1 = mod(e1,phi)
e2 = mod(e2,phi)

d1 = e1**(-_sage_const_1 )
d2 = e2**(-_sage_const_1 )

if d1 > d2 : 
    ans = (N1,e1)
else :
    ans = (N2,e2)


# # Affichage des resultats

print("Il vaut mieux utiliser la cle ",ans)

reset()
print("""\
# ****************************************************************************
# METHODE DE COPPERSMITH
# ****************************************************************************
""")


# Donnees de l'enonce de l'exercice

Pol = PolynomialRing(ZZ, names=('x',)); (x,) = Pol._first_ngens(1)

# Code pour l'EXERCICE

def Coppersmith(f,N):
    Pol = f.parent()
    x = Pol.gen()
    d = f.degree()
    m = ceil(log(N,_sage_const_10 )/d)
    B = ceil(N**(_sage_const_1 /d)/(_sage_const_2 *exp(_sage_const_1 )))
    L = []
    for i in range(m+_sage_const_1 ):
        for j in range(d + _sage_const_1 ) :
            L.append(((B*x)**j*N**i*f(B*x)**(m-i)).padded_list(_sage_const_2 *d))
    M = matrix(L)
    i = _sage_const_0 
    while M[i,:] == _sage_const_0  :
        i+=_sage_const_1 
    h = M[i,:]
    h = vector(h)
    for i in range(len(h)):
        h[i] = h[i]//B**i
    h = Pol(list(h))
    R = h.roots()
    R = list(map(lambda xy : xy[_sage_const_0 ], filter(lambda xy : f(xy[_sage_const_0 ])==_sage_const_0 %N and abs(xy[_sage_const_0 ])<=B, R)))
    return R


# # Affichage des resultats

p=(x+_sage_const_1 )*(x-_sage_const_2 )*(x-_sage_const_3 )*(x-_sage_const_29 )
print(Coppersmith(p,_sage_const_10000 ))

reset()

print("""\
# ****************************************************************************
# MESSAGES STEREOTYPES
# ****************************************************************************
""")


# Donnees de l'enonce de l'exercice

bin=BinaryStrings()
N = _sage_const_42564360034887861127 
Pol = PolynomialRing(ZZ, names=('x',)); (x,) = Pol._first_ngens(1)
PolmodN = PolynomialRing(Integers(N), names=('y',)); (y,) = PolmodN._first_ngens(1)
e = _sage_const_3 
c = _sage_const_12843085802751039909 

# Code pour l'EXERCICE

mm=str(bin.encoding("08/06:00"))
mm = '0'*(_sage_const_8 *ceil(len(mm)/_sage_const_8 )-len(mm))+mm
mm = mod(ZZ(mm,base=_sage_const_2 ),N)
f = PolmodN((mm+y)**e - c)
r = f.small_roots()[_sage_const_0 ]
mm = ZZ((mm+r)%N).str(_sage_const_2 )
mm = '0'*(_sage_const_8 *ceil(len(mm)/_sage_const_8 )-len(mm))+mm
mm = bin(mm).decoding()

# # Affichage des resultats

print("Ce jour la, le message est")
print(mm)

reset()
print("""\
# ****************************************************************************
# ALGORITHME DE BABAI (NE TRAITER QUE LA QUESTION 1)
# ****************************************************************************
""")


# Donnees de l'enonce de l'exercice


# Code pour l'EXERCICE


# Passer en argument la matrice B ou les lignes sont les vecteurs générateurs
# du réseau
def Babai(B,t):
    n = B.nrows()
    b = t
    Bstar,_ = B.gram_schmidt()
    for j in range(n-_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ) : 
        uj = round(b.dot_product(vector(Bstar[j,:]))/vector(Bstar[j,:]).dot_product(vector(Bstar[j,:])))
        b = b - uj * vector(B[j,:])
    return t-b

# # Affichage des resultats
print("""\
# ****************************************************************************
# CRYPTOSYSTEME GGH
# ****************************************************************************
""")


# Donnees de l'enonce de l'exercice

EE= matrix(ZZ,_sage_const_40 , {(_sage_const_32 , _sage_const_32 ): _sage_const_1 , (_sage_const_22 , _sage_const_13 ): -_sage_const_2 , (_sage_const_23 , _sage_const_8 ): -_sage_const_3 ,
       (_sage_const_15 , _sage_const_31 ): -_sage_const_1 , (_sage_const_22 , _sage_const_37 ): -_sage_const_1 ,
       (_sage_const_13 , _sage_const_5 ): -_sage_const_4 , (_sage_const_38 , _sage_const_20 ): _sage_const_2 , (_sage_const_4 , _sage_const_12 ): _sage_const_3 , (_sage_const_19 , _sage_const_22 ): -_sage_const_2 , (_sage_const_15 , _sage_const_5 ): _sage_const_2 , (_sage_const_11 ,
       _sage_const_32 ): -_sage_const_1 , (_sage_const_11 , _sage_const_10 ): _sage_const_3 , (_sage_const_1 , _sage_const_11 ): -_sage_const_4 , (_sage_const_12 , _sage_const_33 ): _sage_const_1 , (_sage_const_0 , _sage_const_15 ): _sage_const_1 , (_sage_const_33 , _sage_const_17 ): _sage_const_1 ,
       (_sage_const_7 , _sage_const_19 ): -_sage_const_1 , (_sage_const_11 , _sage_const_1 ): -_sage_const_2 , (_sage_const_7 , _sage_const_27 ): _sage_const_3 , (_sage_const_19 , _sage_const_32 ): -_sage_const_4 , (_sage_const_22 , _sage_const_10 ): _sage_const_2 , (_sage_const_31 ,
       _sage_const_39 ): -_sage_const_4 , (_sage_const_34 , _sage_const_9 ): _sage_const_2 , (_sage_const_36 , _sage_const_17 ): _sage_const_2 , (_sage_const_18 , _sage_const_17 ): _sage_const_1 , (_sage_const_14 , _sage_const_6 ): -_sage_const_2 , (_sage_const_23 , _sage_const_14 ): _sage_const_3 ,
       (_sage_const_23 , _sage_const_34 ): _sage_const_2 , (_sage_const_12 , _sage_const_11 ): -_sage_const_3 , (_sage_const_0 , _sage_const_21 ): -_sage_const_3 , (_sage_const_27 , _sage_const_22 ): -_sage_const_2 , (_sage_const_4 , _sage_const_29 ): -_sage_const_3 , (_sage_const_23 ,
       _sage_const_5 ): _sage_const_1 , (_sage_const_4 , _sage_const_6 ): -_sage_const_2 , (_sage_const_24 , _sage_const_7 ): _sage_const_2 , (_sage_const_5 , _sage_const_38 ): -_sage_const_2 , (_sage_const_33 , _sage_const_13 ): -_sage_const_1 , (_sage_const_9 , _sage_const_35 ): _sage_const_3 ,
       (_sage_const_18 , _sage_const_36 ): _sage_const_1 , (_sage_const_22 , _sage_const_5 ): _sage_const_1 , (_sage_const_24 , _sage_const_25 ): _sage_const_3 , (_sage_const_34 , _sage_const_31 ): _sage_const_2 , (_sage_const_6 , _sage_const_34 ): -_sage_const_3 , (_sage_const_23 ,
       _sage_const_33 ): -_sage_const_4 , (_sage_const_20 , _sage_const_37 ): -_sage_const_1 , (_sage_const_38 , _sage_const_12 ): _sage_const_2 , (_sage_const_33 , _sage_const_0 ): -_sage_const_1 , (_sage_const_4 , _sage_const_32 ): _sage_const_3 })
AA=(_sage_const_10 *identity_matrix(_sage_const_40 )+EE)
HH, U=AA.hermite_form(transformation=True)

cc = vector([-_sage_const_2 , _sage_const_0 , _sage_const_2 , _sage_const_0 , _sage_const_0 , _sage_const_1 , -_sage_const_1 , -_sage_const_1 , -_sage_const_3 , _sage_const_0 , _sage_const_0 , _sage_const_2 , -_sage_const_1 , _sage_const_13 , _sage_const_7 , _sage_const_2 , _sage_const_0 , _sage_const_2 , _sage_const_27 , _sage_const_2 , _sage_const_1 ,
       _sage_const_17 , -_sage_const_2 , _sage_const_899 , _sage_const_50 , _sage_const_15 , _sage_const_11 , _sage_const_1098 , _sage_const_7 , _sage_const_2 , -_sage_const_1 , _sage_const_10 , -_sage_const_1 , _sage_const_2 , _sage_const_156 , _sage_const_15 , _sage_const_42 , _sage_const_8 ,
       _sage_const_525748584 , _sage_const_37 ])


# Code pour l'EXERCICE


bin = BinaryStrings()
def IntsToString(listints):
    return bin("".join([t.str(_sage_const_2 ) for t in listints])).decoding()

mm = Babai(AA,cc)
mm = U**(-_sage_const_1 )*mm


# # Affichage des resultats

print("Je n'ai pas réussi cet exercice, je n'arrivais pas à savoir la convention employée pour la forme normale de smith dans l'exercice")

